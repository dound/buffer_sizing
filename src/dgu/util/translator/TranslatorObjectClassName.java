//Filename: TranslatorObjectClassName.java
//Revision: $Revision: 1.1 $
//Rev Date: $Date: 2007/02/24 01:41:43 $

package dgu.util.translator;

import java.util.AbstractList;


/**
 * Can translate to an Object of type T from a string.  The Object is 
 * generated from the string by using a constructor in the class specified
 * by the string (canonical name).  The parameters to the constructor are specified
 * by the constructor to this TranslatorObjectClassName class.  The string is 
 * generated by calling the getClass().getCanonicalName() method of the Object.
 *
 * @author David Underhill
 */
public class TranslatorObjectClassName<T> extends TypeTranslator<T, String> {
    
    //<editor-fold defaultstate="collapsed" desc="      Constructors       ">

    private AbstractList<Object> list = new java.util.Vector<Object>();
    
    /**
     * Instantiates a translator (will use T's default constructor)
     */
    public TranslatorObjectClassName() {
        /* Intentionally Blank */
    }
    
    /**
     * Instantiates a translator
     *
     * @param o  object to pass to the T's contructor
     */
    public TranslatorObjectClassName( Object o ) {
        list.add( o );
    }
    
    /**
     * Instantiates a translator
     *
     * @param o1  first object to pass to the T's contructor
     * @param o2  first object to pass to the T's contructor
     */
    public TranslatorObjectClassName( Object o1, Object o2 ) {
        list.add( o1 );
        list.add( o2 );
    }
    
    /**
     * Instantiates a translator
     *
     * @param params  list of values to pass to the T's constructor (if null, then null is added to a new list!)
     */
    public TranslatorObjectClassName( AbstractList<Object> params ) {
        if( params == null )
            list.add( params );
        else
            this.list = params;
    }

    //</editor-fold>


    //<editor-fold defaultstate="collapsed" desc="     Worker Methods      ">

    /**
     * gets the String representation of the specified object T
     *
     * @param  valueToTranslate  some object T
     *
     * @return the String representation of the valueToTranslate (null if valueToTranslate is null)
     */
    public String translate1( T valueToTranslate ) {
        return ( valueToTranslate == null ) ? null : valueToTranslate.getClass().getCanonicalName();
    }
    
    /**
     * gets the Object representation of the specified String
     *
     * @param  valueToTranslate  some String
     *
     * @return the T representation of the valueToTranslate
     *
     * @throws TranslationFailedException  thrown if the value cannot be translated
     */
    public T translate2( String valueToTranslate ) throws TranslationFailedException {
        try {
            Class cls = Class.forName( valueToTranslate );
            if( list.size() == 0 ) 
                return (T)cls.newInstance();
            else {
            
                //find the constructor to use
                for( java.lang.reflect.Constructor c : cls.getConstructors() ) {
                    if( c.getParameterTypes().length == list.size() ) {
                        int i = 0;
                        for( Class paramType : c.getParameterTypes() ) {
                            if( list.get(i) == null || paramType.getClass() != list.get(i).getClass() ) {
                                break; //try the next constructor; type doesn't match here
                            }
                            
                            i += 1;
                        }
                        
                        //found the constructor: use it
                        return (T)c.newInstance( list.toArray() );
                    }
                }
                
                //constructor not found ... error
                throw( new TranslationFailedException( "String translation failed (Constructor Not Found)" ) );
            }
        } catch( ClassNotFoundException e ) {
            throw( new TranslationFailedException( "String translation failed (Class Not Found): " +
                                                   "cannot convert the string `" + valueToTranslate + "`" ) );
        } catch( InstantiationException e ) {
            throw( new TranslationFailedException( "String translation failed (Instantiation Error): " +
                                                   "cannot convert the string `" + valueToTranslate + "`" ) );
        } catch( IllegalAccessException e ) {
            throw( new TranslationFailedException( "String translation failed (Illegal Access): " +
                                                   "cannot convert the string `" + valueToTranslate + "`" ) );
        } catch( java.lang.reflect.InvocationTargetException e ) {
            throw( new TranslationFailedException( "String translation failed (Invocation Error): " +
                                                   "cannot convert the string `" + valueToTranslate + "`" ) );
        }
    }
    
    //</editor-fold>
    
}
