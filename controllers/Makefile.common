# Common Makefile
# ------------------------------------------------------------------------------
# make        -- builds the project and all dependencies in the default mode
# make clean  -- clean up byproducts

# define APP, APP_SRCS, and ROOT_SRC_DIR in the Makefile including this one

# utility programs used by this Makefile
CC   = gcc
MAKE = gmake --no-print-directory

# set system-dependent variables
OSTYPE = $(shell uname)
ifeq ($(OSTYPE),Linux)
ARCH=-D_LINUX_
ENDIAN=-D_LITTLE_ENDIAR_N_
LIB_SOCKETS =
endif
ifeq ($(OSTYPE),SunOS)
ARCH=-D_SOLARIS_
ENDIAN=-D_BIG_ENDIAN_
LIB_SOCKETS = -lnsl -lsocket
endif

# compiler and its directives
DIR_LIB       =
LIBS          = $(LIB_SOCKETS) -lpthread
FLAGS_CC_BASE = -c -Wall $(ARCH) $(ENDIAN)

# compiler directives for debug and release modes
BUILD_TYPE = debug
ifeq ($(BUILD_TYPE),debug)
FLAGS_CC_BUILD_TYPE = -g -D_DEBUG_
else
FLAGS_CC_BUILD_TYPE = -O3
endif

# put all the flags together
CFLAGS = $(FLAGS_CC_BASE) $(FLAGS_CC_BUILD_TYPE)

# common sources
SRCS = $(ROOT_SRC_DIR)common.c $(ROOT_SRC_DIR)debug.c $(ROOT_SRC_DIR)io_wrapper.c $(APP_SRCS)
OBJS = $(patsubst %.c,%.o,$(SRCS))

## PHONY TARGETS
#########################
# note targets which don't produce a file with the target's name
.PHONY: $(APP) all clean debug release

# build the program
all: $(APP)

# clean up by-products
clean:
	rm -f *.o $(APP)

# shorthand for building debug or release builds
debug release:
	@$(MAKE) BUILD_TYPE=$@ all

# the real build command
$(APP): $(OBJS)
	$(CC) -o $(APP) $(OBJS) $(DIR_LIB) $(LIBS)
